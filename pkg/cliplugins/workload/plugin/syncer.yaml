---
apiVersion: v1
kind: Namespace
metadata:
  name: {{.Namespace}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.ServiceAccount}}
  namespace: {{.Namespace}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{.DNSServiceAccount}}
  namespace: {{.Namespace}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.ServiceAccount}}-token
  namespace: {{.Namespace}}
  annotations:
    kubernetes.io/service-account.name: {{.ServiceAccount}}
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{.ClusterRole}}
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - "create"
  - "list"
  - "watch"
  - "delete"
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - "get"
  - "watch"
  - "list"
{{- range $groupMapping := .GroupMappings}}
- apiGroups:
  - "{{$groupMapping.APIGroup}}"
  resources:
  {{- range $resource := $groupMapping.Resources}}
  - {{$resource}}
  {{- end}}
  verbs:
  - "*"
{{- end}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{.DNSClusterRole}}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - "get"
      - "list"
      - "watch"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{.ClusterRoleBinding}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{.ClusterRole}}
subjects:
- kind: ServiceAccount
  name: {{.ServiceAccount}}
  namespace: {{.Namespace}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{.DNSClusterRoleBinding}}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{.DNSClusterRole}}
subjects:
  - kind: ServiceAccount
    name: {{.DNSServiceAccount}}
    namespace: {{.Namespace}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{.Secret}}
  namespace: {{.Namespace}}
stringData:
  {{.SecretConfigKey}}: |
    apiVersion: v1
    kind: Config
    clusters:
    - name: default-cluster
      cluster:
        certificate-authority-data: {{.CAData}}
        server: {{.ServerURL}}
    contexts:
    - name: default-context
      context:
        cluster: default-cluster
        namespace: {{.KCPNamespace}}
        user: default-user
    current-context: default-context
    users:
    - name: default-user
      user:
        token: {{.Token}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Deployment}}
  namespace: {{.Namespace}}
spec:
  replicas: {{.Replicas}}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{.DeploymentApp}}
  template:
    metadata:
      labels:
        app: {{.DeploymentApp}}
    spec:
      containers:
      - name: kcp-syncer
        command:
        - /ko-app/syncer
        args:
        - --from-kubeconfig=/kcp/{{.SecretConfigKey}}
        - --sync-target-name={{.SyncTarget}}
        - --sync-target-uid={{.SyncTargetUID}}
        - --from-cluster={{.LogicalCluster}}
        - --api-import-poll-interval={{ .APIImportPollIntervalString }}
{{- range $resourceToSync := .ResourcesToSync}}
        - --resources={{$resourceToSync}}
{{- end}}
        - --qps={{.QPS}}
        - --burst={{.Burst}}
{{- if .FeatureGatesString }}
        - --feature-gates={{ .FeatureGatesString }}
{{- end}}
        - --dns={{.DNSAppName}}.{{.Namespace}}.svc.cluster.local
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: {{.Image}}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: kcp-config
          mountPath: /kcp/
          readOnly: true
      serviceAccountName: {{.ServiceAccount}}
      volumes:
        - name: kcp-config
          secret:
            secretName: {{.Secret}}
            optional: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.DNSAppName}}
  namespace: {{.Namespace}}
spec:
  replicas: {{.Replicas}}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{.DNSAppName}}
  template:
    metadata:
      labels:
        app: {{.DNSAppName}}
    spec:
      containers:
      - name: kcp-dns
        command:
        - /ko-app/syncer
        args:
        - dns
        - start
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: {{.Image}}
        imagePullPolicy: IfNotPresent
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: {{.DNSServiceAccount}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{.DNSAppName}}
  namespace: {{.Namespace}}
  labels:
    app: {{.DNSAppName}}
spec:
  type: ClusterIP
  selector:
    app: {{.DNSAppName}}
  ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 5353
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 5353

